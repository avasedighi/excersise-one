class Time:
    def __init__(self, hour: int, minute: int, second: float):
        self.hour = hour
        self.minute = minute
        self.second = second

    def showItInHour(self):
        return self.second / 3600 + self.minute / 60 + self.hour

    def showItInMinute(self):
        return self.second / 60 + self.minute + self.hour * 60

    def showItInSecond(self):
        return self.second + self.minute * 60 + self.hour * 3600


class BirthDate:
    def __init__(self, year: int, month: int, day: int):
        self.year = year
        self.month = month
        self.day = day

    def age(self):
        return 2023 - self.year

    def isAdult(self):
        if self.age() >= 18:
            return True
        else:
            return False


class PhoneNumber:
    def __init__(self, callingCode: str, number: str):
        self.callingCode = callingCode
        self.number = number

    def getCallingCode(self):
        print(self.callingCode)

    def worldZone(self):
        if self.callingCode == '+1':
            return 'North America'
        if self.callingCode == '+2':
            return 'Africa'
        if self.callingCode == '+3' or self.callingCode == '+4':
            return 'Europe'
        if self.callingCode == '+5':
            return 'South & central America'
        if self.callingCode == '+6':
            return 'Southeast Asia & Oceania'
        if self.callingCode == '+7':
            return 'Russian'
        if self.callingCode == '+8':
            return 'East Asia'
        if self.callingCode == '+9':
            return 'Middle East'
        if self.callingCode == '+98':
            return 'Iran'
        return 'Unknown'


class Passenger:
    def __init__(self, name: str, birthDate: BirthDate, sex: str,
                 nationality: str, idCode: str, phoneNumber: PhoneNumber):
        self.name = name
        self.birthDate = birthDate
        self.sex = sex
        self.nationality = nationality
        self._idCode = idCode
        self._phoneNumber = phoneNumber

    def needAdultTicket(self):
        if self.birthDate.isAdult():
            return True
        else:
            return False

    def isMale(self):
        if self.sex == 'male':
            return True
        else:
            return False

    def isIranian(self):
        if self.nationality == 'Iran':
            return True
        else:
            return False


passenger1 = Passenger('Ava', BirthDate(2004, 4, 13), 'female', 'Iran', '3515',
                       PhoneNumber('+98', '9164474078'))
# a sample passenger (it's me actually.)


class Ticket:
    def __init__(self, ticketID: str, flightNumber: str, passenger: Passenger,
                 ticketType: str, price: float, flightAllowedLuggage: float):
        self.ticketID = ticketID
        self.flightNumber = flightNumber
        self._passenger = passenger
        self.ticketType = ticketType
        self.price = price
        self.flightAllowedLuggage = flightAllowedLuggage

    def getFlightNumber(self):
        print(self.flightNumber)

    def showPrice(self):
        print(self.price)

    def _getReservationID(self):
        return id(Passenger)


class Aircraft:
    def __init__(self, name: str, manufacturer: str, lengthInMeter: float,
                 requiredCabinCrew: int, capacity: int, seatLetters: list,
                 firstFlight: BirthDate):
        self.name = name
        self.manufacturer = manufacturer
        self.lengthInMeter = lengthInMeter
        self._requiredCabinCrew = requiredCabinCrew
        self._capacity = capacity
        self.seatLetters = seatLetters
        self.firstFlight = firstFlight

    def howOld(self):
        return self.firstFlight.age()

    def isNew(self):
        if self.firstFlight.age() <= 25:
            return True
        return False


aircraft1 = Aircraft('Boeing 737-800', 'Boeing', '40', 2, 140,
                     ['A', 'B', 'C', 'D', 'E', 'F'], BirthDate(1997, 7, 31))
aircraft2 = Aircraft('Airbus A310-300', 'Airbus', '47', 3, 170,
                     ['A', 'B', 'C', 'D', 'E', 'F'], BirthDate(1987, 2, 22))
# two examples of airplanes which I like the first one more.


class Airline:
    def __init__(self, airlineName: str, callSign: str,
                 airlineType: str, phoneNumber: PhoneNumber):
        self.airlineName = airlineName
        self.callSign = callSign
        self.airlineType = airlineType
        self.phoneNumber = phoneNumber

    def isIranian(self):
        if self.phoneNumber.worldZone() == 'Iran':
            return True
        return False

    def isInterntional(self):
        if self.airlineType == 'International':
            return True
        return False

    def showHubsList(self):
        if self.phoneNumber.worldZone() == 'Iran':
            return ['Imam Khomeini International Airport',
                    'Mehrabad International Airport']
        return ['unknown airports']


IranAir = Airline('Iran Air', 'IranAir', 'International',
                  PhoneNumber('+98', '02146621888'))
# an example of an airline that is also the best airline in Iran.


class Flight:
    def __init__(self, flightNumber: str, airline: Airline, aircraft: Aircraft,
                 fromID: str, toID: str, scheduledDepartureTime: Time,
                 actualDepartureTime: Time, arrivalTime: Time):
        self.flightNumber = flightNumber
        self.airline = airline
        self.aircraft = aircraft
        self.fromID = fromID
        self.toID = toID
        self.scheduledDepartureTime = scheduledDepartureTime
        self.actualDepartureTime = actualDepartureTime
        self.arrivalTime = arrivalTime
        self.capacity = self.aircraft._capacity

    def getFlightNumber(self):
        print(self.flightNumber)

    def isDylayed(self):
        if self.scheduledDepartureTime == self.actualDepartureTime:
            return False
        return True

    def howMuchDelay(self):
        return Time(self.actualDepartureTime.hour - self.scheduledDepartureTime.hour,
                    self.actualDepartureTime.minute - self.scheduledDepartureTime.minute,
                    self.actualDepartureTime.second - self.scheduledDepartureTime.second)

    def flightDuration(self):
        return Time(self.arrivalTime.hour - self.actualDepartureTime.hour,
                    self.arrivalTime.minute - self.actualDepartureTime.minute,
                    self.arrivalTime.second - self.actualDepartureTime.second)


current_flight = Flight('2538', IranAir, aircraft1, 'SHZ', 'THR',
                        Time(20, 30, 0), Time(20, 48, 57), Time(22, 9, 27))
# this flight will update in order to issue the boarding pass.


class BoardingPass:
    def __init__(self, flightNumber: str,  gate: str, passenger: Passenger,
                 seatNumber: str):
        self.flight = current_flight
        self.flightNumber = self.flight.flightNumber
        self.gate = gate
        self.passenger = passenger
        self.seatNumber = seatNumber
        self.carrier = Aircraft('Boeing 737-800', 'Boeing', '40', 2, 140,
                                ['A', 'B', 'C', 'D', 'E', 'F'],
                                BirthDate(1997, 7, 31))

    def hasWindow(self):
        if self.seatNumber[0] == self.carrier.seatLetters[0]:
            return True
        elif self.seatNumber[0] == self.carrier.seatLetters[-1]:
            return True
        return False

    def showTheGate(self):
        return(self.gate)

    def isCloseToCockpit(self):
        if eval(self.seatNumber[1:]) <= (self.carrier._capacity /
                                         (len(self.carrier.seatLetters)*3)):
            return True
        return False

    def whatIsTheCarrier(self):
        return (self.carrier)


boarding_pass_1 = BoardingPass(current_flight, 'A12', passenger1, 'B16')
# it's jusr a sample boarding pass.


class Staff:
    def __init__ (self, firstName: str, lastName: str, staffCode: int,
                 workShift: str, entranceTime: Time):
        self.firstName = firstName
        self.lastName = lastName
        self._staffCode = staffCode
        self.workShift = workShift
        self.entranceTime = entranceTime

    def fetInfo(self):
        print(['my name is ' + self.firstName + ' ' + self.lastName,
              'my code is ' + str(self.staffCode)])

    def timeLeftFromShift(self):
        if self.workShift == 'morning':
            return Time(15 - self.entranceTime.hour , 59 - self.entranceTime.minute,
                 59 - self.entranceTime.second)
        if self.workShift == 'evening':
            return Time(23 - self.entranceTime.hour , 59 - self.entranceTime.minute,
                 59 - self.entranceTime.second)
        if self.workShift == 'night':
            return Time(7 - self.entranceTime.hour , 59 - self.entranceTime.minute,
                 59 - self.entranceTime.second)

    def howMuchWorked(self):
        if self.workShift == 'morning':
            return Time( self.entranceTime.hour - 8 , self.entranceTime.minute,
                 self.entranceTime.second)
        if self.workShift == 'evening':
            return Time( self.entranceTime.hour - 16 , self.entranceTime.minute,
                 self.entranceTime.second)
        if self.workShift == 'night':
            return Time( self.entranceTime.hour , self.entranceTime.minute,
                 self.entranceTime.second)

    def isOnTime(self):
        if self.workShift == 'morning':
            if self.entranceTime == Time(8, 0, 0):
                return True
            return False
        if self.workShift == 'evening':
            if self.entranceTime == Time(16, 0, 0):
                return True
            return False
        if self.workShift == 'night':
            if self.entranceTime == Time(0, 0, 0):
                return True
            return False


class Airport:
    def __init__ (self, name: str, airportCode: str, airportType: str,
                  address: str, phoneNumber: PhoneNumber, salary: float):
        self.name = name
        self.airportCode = airportCode
        self.airportType = airportType
        self.address = address
        self.phoneNumber = phoneNumber
        self.staff = airport_controllers

    def isInternational(self):
        if self.airportType == 'International':
            return True
        return False

    def isBusy(self):
        if self.staff.workShift == ( 'morning' or 'evening' ):
            return True
        return False


class AirportSeller(Staff):
    def __init__ (self, firstName, lastName, staffCode,
                 workShift, entranceTime, shopCode: str, income: int):
        super().__init__(firstName, lastName, staffCode,
                 workShift, entranceTime)
        self.shopeCode = shopCode
        self.income = income

    def howMuchSalary(self):
        print( self.income )


class TicketController(Staff):
    def __init__ (self, firstName, lastName, staffCode, workShift, entranceTime, gateCode: str):
        super().__init__(firstName, lastName, staffCode, workShift, entranceTime)
        self.gateCode = gateCode

    def howMuchSalary(self):
        if self.workShift == 'morning' or self.workShift == 'evening':
            return 70000
        return 80000
